#include <stdio.h>
#include <stdlib.h>
#include <ctype.h>
#define MAX 100
typedef struct {
    int top;
    char items[MAX];
} Stack;
void initStack(Stack* stack) {
    stack->top = -1;
}
int isEmpty(Stack* stack) {
    return stack->top == -1;
}
void push(Stack* stack, char value) {
    stack->items[++stack->top] = value;
}
char pop(Stack* stack) {
    return stack->items[stack->top--];
}
char peek(Stack* stack) {
    return stack->items[stack->top];
}
int precedence(char op) {
    return (op == '+' || op == '-') ? 1 : (op == '*' || op == '/') ? 2 : 0;
}
void infixToPostfix(char* infix, char* postfix) {
    Stack stack;
    initStack(&stack);
    int k = 0;
    for (int i = 0; infix[i]; i++) {
        if (isdigit(infix[i]))
            postfix[k++] = infix[i];
        else if (infix[i] == '(')
            push(&stack, infix[i]);
        else if (infix[i] == ')') {
            while (peek(&stack) != '(')
                postfix[k++] = pop(&stack);
            pop(&stack);
        } else {
            while (!isEmpty(&stack) && precedence(peek(&stack)) >= precedence(infix[i]))
                postfix[k++] = pop(&stack);
            push(&stack, infix[i]);
        }
    }
    while (!isEmpty(&stack))
        postfix[k++] = pop(&stack);
    postfix[k] = '\0';
}
int evaluatePostfix(char* postfix) {
    Stack stack;
    initStack(&stack);
    for (int i = 0; postfix[i]; i++) {
        if (isdigit(postfix[i]))
            push(&stack, postfix[i] - '0');
        else {
            int b = pop(&stack), a = pop(&stack);
            switch (postfix[i]) {
                case '+': push(&stack, a + b); break;
                case '-': push(&stack, a - b); break;
                case '*': push(&stack, a * b); break;
                case '/': push(&stack, a / b); break;
            }
        }
    }
    return pop(&stack);
}
int main() {
    char infix[MAX], postfix[MAX];
    printf("Enter infix expression: ");
    scanf("%s", infix);
    infixToPostfix(infix, postfix);
    printf("Postfix expression: %s\n", postfix);
    printf("Result of evaluation: %d\n", evaluatePostfix(postfix));
    return 0;
}

Output:
Enter infix expression: 3+4*2/(1-5)
Postfix expression: 342*15-/+
Result of evaluation: 1
